// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  image          String?
  hashedPassword String? // Add this line
  accounts       Account[]
  sessions       Session[]
  votes          Vote[]
}

model Beer {
  id        String       @id @default(cuid())
  name      String
  alcohol   Float // % alcohol
  price     Int? // cena w groszach
  category  BeerCategory
  image     String?
  votes     Vote[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Vote {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  beer      Beer     @relation(fields: [beerId], references: [id])
  beerId    String
  stars     Int // 0-10
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, beerId]) // 1 vote per user per beer
}

enum BeerCategory {
  SMAKOWE // flavored
  NIESMAKOWE // non-flavored
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
